
@online{_javascript_2018,
	title = {{JavaScript} Introduction},
	url = {https://developer.mozilla.org/nl/docs/Web/JavaScript/Guide/Introduction},
	abstract = {This chapter introduces {JavaScript} and discusses some of its fundamental concepts.},
	titleaddon = {{JavaScript} Introduction},
	date = {2018}
}

@online{clifton_what_2003,
	title = {What is a Framework},
	url = {https://www.codeproject.com/Articles/5381/What-Is-A-Framework},
	titleaddon = {What is a Framework},
	author = {Clifton, Marc},
	date = {2003-11-03}
}

@online{eskelin_software_2001,
	title = {Software Framework},
	url = {http://wiki.c2.com/?SoftwareFramework},
	abstract = {Here are some types of software frameworks:},
	titleaddon = {Software Framework},
	author = {Eskelin, Philip},
	date = {2001-11-03}
}

@online{_model-view-controller_2014,
	title = {Model-View-Controller},
	url = {https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff649643(v=pandp.10)},
	abstract = {The purpose of many computer systems is to retrieve data from a data store and display it for the user. After the user changes the data, the system stores the updates in the data store. Because the key flow of information is between the data store and the user interface, you might be inclined to tie these two pieces together to reduce the amount of coding and to improve application performance. However, this seemingly natural approach has some significant problems. One problem is that the user interface tends to change much more frequently than the data storage system. Another problem with coupling the data and user interface pieces is that business applications tend to incorporate business logic that goes far beyond data transmission.},
	date = {2014-03-17}
}

@online{atwood_understanding_2008,
	title = {Understanding the Model-View-Controller},
	url = {https://blog.codinghorror.com/understanding-model-view-controller/},
	abstract = {Like everything else in software engineering, it seems, the concept of Model-View-Controller was originally invented by Smalltalk programmers.},
	author = {Atwood, Jeff},
	date = {2008-05-05}
}

@inreference{_benchmark_????,
	title = {Benchmark},
	url = {https://dictionary.cambridge.org/dictionary/english/benchmark},
	booktitle = {Cambridge Advanced Learner’s Dictionary \& Thesaurus}
}

@online{github_front-end_????,
	title = {Front-end {JavaScript} frameworks},
	url = {https://github.com/collections/front-end-javascript-frameworks},
	abstract = {While the number of ways to organize {JavaScript} is almost infinite, here are some tools that help you build single-page applications.},
	titleaddon = {Front-end {JavaScript} frameworks},
	author = {{GitHub}}
}

@online{_angular_2018,
	title = {Angular docs},
	url = {https://angular.io/docs},
	abstract = {Angular is a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. Angular empowers developers to build applications that live on the web, mobile, or the desktop.},
	titleaddon = {Angular docs},
	type = {Documentation website},
	date = {2018}
}

@online{_vue_2018,
	title = {Vue docs},
	url = {https://vuejs.org/v2/guide/},
	abstract = {Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.},
	titleaddon = {Vue docs},
	type = {Documentation website},
	date = {2018}
}

@online{_react_2018,
	title = {React docs},
	url = {https://reactjs.org/docs/},
	abstract = {React is a declarative, efficient, and flexible {JavaScript} library for building user interfaces.},
	titleaddon = {React docs},
	type = {Documentation website},
	date = {2018}
}